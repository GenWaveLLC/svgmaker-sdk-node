name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests (without coverage requirements)
      run: npx jest --passWithNoTests --no-coverage
      
    - name: Run linting
      run: npm run lint
      
    - name: Build package
      run: npm run build
      
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog entry
        if [ -f CHANGELOG.md ]; then
          # Extract changelog entry for this version
          CHANGELOG_ENTRY=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY="Release $VERSION"
          fi
        else
          CHANGELOG_ENTRY="Release $VERSION"
        fi
        
        # Save changelog to file for GitHub release (escape special characters)
        {
          echo 'CHANGELOG_CONTENT<<EOF'
          echo "$CHANGELOG_ENTRY"
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
    - name: Publish to npm
      run: |
        # Verify package.json version matches tag
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå Version mismatch: package.json ($PACKAGE_VERSION) != tag ($TAG_VERSION)"
          exit 1
        fi
        
        # Check if version already exists on npm
        if npm view "svgmaker-sdk@$PACKAGE_VERSION" version >/dev/null 2>&1; then
          echo "‚ùå Version $PACKAGE_VERSION already exists on npm"
          exit 1
        fi
        
        # Publish to npm
        echo "üì¶ Publishing version $PACKAGE_VERSION to npm..."
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      
    - name: Notify success
      if: success()
      run: |
        echo "‚úÖ Successfully released version ${{ steps.changelog.outputs.version }}"
        echo "üì¶ Package published to npm: https://www.npmjs.com/package/svgmaker-sdk"
        echo "üöÄ GitHub release created: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"